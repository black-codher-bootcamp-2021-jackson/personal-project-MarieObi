@import url('https://fonts.googleapis.com/css2?family=Montserrat&display=swap');


/* .App {
  text-align: center;
  font-family: 'Montserrat', sans-serif;
}
*/


/* set css variables to be reused throughout a document. */
:root {
  --black: #121212;
  --near-black: #181818;
  --dark-grey: #282828;
  --grey: #535353;
  --light-grey: #b3b3b3;
  --white: #ffffff;
  --green: #1DB954;

  --font: 'Montserrat', sans-serif;

  --fz-xxs: 12px;
  --fz-xs: 13px;
  --fz-sm: 14px;
  --fz-md: 16px;
  --fz-lg: 18px;
  --fz-xl: 20px;
  --fz-xxl: 24px;

  --spacing-xxs: 4px;
  --spacing-xs: 8px;
  --spacing-sm: 12px;
  --spacing-md: 16px;
  --spacing-lg: 24px;
  --spacing-xl: 32px;
  --spacing-xxl: 64px;

  --border-radius-subtle: 4px;
  --border-radius-pill: 30px;

  --site-max-width: 1300px;
}


/* Global style */
html {
  box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

body {
  margin: 0;
  padding: 0;
  width: 100%;
  max-width: 100%;
  min-height: 100%;
  overflow-x: hidden;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  background-color: var(--black);
  color: var(--white);
  font-family: var(--font);
  font-size: var(--fz-md);
   /* background-color: black;
  color: white; */
}

h1, h2, h3, h4, h5, h6 {
  letter-spacing: -.04em;
  margin: 0 0 10px;
}

p {
  margin: 0 0 10px;
}

a, button {
  transition: all 0.3s ease;
  color: inherit;
}

a {
  text-decoration: none;
  display: inline-block;
  background-color: var(--green);
  color: var(--white);
  border-radius: var(--border-radius-pill);
  font-weight: 700;
  font-size: var(--fz-lg);
  padding: var(--spacing-sm) var(--spacing-xl);
}

a
 :hover,
 :focus {
  text-decoration: underline;
  filter: brightness(1.1);
}

button {
  border: 0;
  cursor: pointer;
  font-family: inherit;
  border-radius: var(--border-radius-pill);
  background-color: rgba(0,0,0,.7);
  color: var(--white);
  font-size: var(--fz-sm);
  font-weight: 700;
  padding: var(--spacing-xs) var(--spacing-sm);
}

button
 :hover,
 :focus {
    background-color: var(--dark-grey);
    outline: 0;
}


img {
  width: 100%;
  max-width: 100%;
  vertical-align: middle;
}

main {
  position: relative;
  padding: var(--spacing-xxl) 0;
}

.app {
  min-height: 100vh;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

.overflow-ellipsis {
  -webkit-line-clamp: 1;
  -webkit-box-orient: vertical;
  display: -webkit-box;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: unset;
  word-break: break-all;
}

.empty-notice {
  color: var(--grey);
  font-size: var(--fz-lg);
  text-align: center;
  padding: var(--spacing-xxl);
}

 /*
.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
} */


/* .App-link {
  
} */


/* Login component */
.StyledLoginContainer {
  /* StyledLoginContainer class for main element - centers the login button with flexbox*/
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

.StyledLoginButton {
  /* StyledLoginButton class for anchor(a) element*/
  display: inline-block;
  background-color: var(--green);
  color: var(--white);
  border-radius: var(--border-radius-pill);
  font-weight: 700;
  font-size: var(--fz-lg);
  padding: var(--spacing-sm) var(--spacing-xl);
}

.StyledLoginButton
 :hover,
 :focus {
  text-decoration: none;
  filter: brightness(1.1);
}

/* Logout Component */
/* StyledLogoutButton class for button element in App.js*/
.StyledLogoutButton {
  position: absolute;
  top: var(--spacing-sm);
  right: var(--spacing-md);
  padding: var(--spacing-xs) var(--spacing-sm);
  background-color: rgba(0,0,0,.7);
  color: var(--white);
  font-size: var(--fz-sm);
  font-weight: 700;
  border-radius: var(--border-radius-pill);
  z-index: 10;
  @media (min-width: 768px) {
    right: var(--spacing-lg);
  }
}

/* Styled Header Component */
/* StyledHeader class for header element in Profile.js*/
/* Styling profile data - Adding styles to current user's profile image, name, and number of followers from our getCurrentUserProfile() */
.StyledHeader {
  display: flex;
  align-items: flex-end;
  position: relative;
  background: linear-gradient(transparent, rgba(0,0,0,0.5));
  background-color: var(--grey);
  height: 30vh;
  max-height: 500px;
  min-height: 250px;

  @media (min-width: 768px) {
    min-height: 340px;
  }
}

.StyledHeader
 :after {
  content: '';
  display: block;
  width: 100%;
  height: 20vh;
  background-color: var(--grey);
  background-image: linear-gradient(rgba(0,0,0,0.6), var(--black));
  position: absolute;
  top: 100%;
  z-index: -1;
}

.header__inner {
  display: flex;
  align-items: flex-end;
  width: 100%;
  max-width: var(--site-max-width);
  margin: 0 auto;
  padding: var(--spacing-lg) var(--spacing-md);

  @media (min-width: 768px) {
    padding: var(--spacing-xl) var(--spacing-xxl);
  }
}

img.header__img {
  width: 20%;
  max-width: 250px;
  min-width: 120px;
  margin-right: var(--spacing-lg);
  box-shadow: 0 4px 60px rgb(0 0 0 / 50%);
  background-color: var(--dark-grey);
  /* border-radius: ${props => props.type === 'user' ? '50%' : '0'}; */

  @media (min-width: 768px) {
    margin-right: var(--spacing-xl);
  }
}

.header__overline {
  text-transform: uppercase;
  font-size: var(--fz-xxs);
  font-weight: 700;
  margin-bottom: var(--spacing-xs);
}

h1.header__name {
  font-size: clamp(2.5rem, 10vw, 6rem);
  font-weight: 900;
  line-height: 1;
  margin: 0 0 var(--spacing-xs) 0;

  @media (min-width: 768px) {
    margin: 0 0 var(--spacing-xs) -5px;
  }
}

.header__meta {
  display: flex;
  align-items: center;
  font-size: var(--fz-sm);
  color: var(--light-grey);
  margin: 0;
}
  
.header__meta span {
  display: flex;
  align-items: center;
}

.header__meta span
 :not(:last-of-type)::after {
  content: 'â€¢';
  display: block;
  margin: 0 var(--spacing-xs);
  color: var(--light-grey);
  font-size: 8px;
}

/* Styled Section component*/
/* StyledSection class for section element in SectionWrapper.js*/
.StyledSection
 :first-of-type 
  .section__inner {
    padding-top: 0;
}

.section__inner {
  width: 100%;
  max-width: var(--site-max-width);
  margin: 0 auto;
  position: relative;
  padding: var(--spacing-lg) var(--spacing-md);

  @media (min-width: 768px) {
    padding: var(--spacing-xl) var(--spacing-xxl);
  }
}

.section__top {
  display: flex;
  justify-content: space-between;
  align-items: stretch;
  margin-bottom: var(--spacing-xl);
}

.section__heading {
  display: flex;
  margin: 0;
  font-size: var(--fz-xxl);
}

.section__breadcrumb {
  display: flex;
  color: var(--light-grey);
}

.section__breadcrumb
 ::after {
  content: '/';
  display: block;
  margin: 0 var(--spacing-sm);
}

.section__breadcrumb
 a
  :hover,
  :focus {
    color: var(--white);
}

.section__see-all {
  display: flex;
  align-items: flex-end;
  text-transform: uppercase;
  color: var(--light-grey);
  font-size: var(--fz-xxs);
  font-weight: 700;
  letter-spacing: 0.1em;
  padding-bottom: 2px;
}


/* Styled Grid Component */
/* StyledGrid class for ul element in ArtistsGrid.js*/
.StyledGrid {
  list-style: none;
  margin: 0;
  padding: 0;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
  grid-gap: var(--spacing-sm);

  @media (min-width: 768px) {
    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    grid-gap: var(--spacing-lg);
  }
}

.grid__item {
  background-color: var(--near-black);
  border-radius: var(--border-radius-subtle);
  transition: background-color 0.3s ease;
  cursor: default;
}

.grid__item
 :hover,
 :focus {
  background-color: var(--dark-grey);
}

.grid__item img {
  box-shadow: 0 8px 24px rgb(0 0 0 / 50%);
}

.grid__item 
  a {
  display: block;
  width: 100%;
  height: 100%;
}
   
.grid__item 
  a
   :hover,
   :focus {
     text-decoration: none;
}


.grid__item__inner {
  padding: var(--spacing-sm);

  @media (min-width: 768px) {
    padding: var(--spacing-md);
  }
}

.grid__item__img {
  position: relative;
  padding-top: 100%;
  margin: 0 auto var(--spacing-lg);
}

  .grid__item__img 
   img {
    position: absolute;
    top: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    background-color: var(--dark-grey);
    /* border-radius: ${props => props.type === 'artist' ? '50%' : '2px'}; */
  }

  .grid__item__name {
    margin: 0 0 var(--spacing-xxs);
    font-size: var(--fz-md);
    letter-spacing: normal;
  }

  .grid__item__label {
    font-size: var(--fz-sm);
    color: var(--light-grey);
  }

/*TimeRangeButtons Component */
/* StyledRangeButtons class for ul element*/
/* The StyledRangeButtons styled component displays a list of buttons, and adds a green background to the active button. */
.StyledRangeButtons {
  display: flex;
  list-style: none;
  margin: 0 0 var(--spacing-lg) 0;
  padding: 0;
  
  @media (min-width: 768px) {
    position: absolute;
    top: 0;
    right: var(--spacing-xxl);
    margin-bottom: 0;
  }
}

.StyledRangeButtons
  li {
    margin-right: var(--spacing-xs);
  
    @media (min-width: 768px) {
      margin-left: var(--spacing-xs);
      margin-right: 0;
    }
}
  
.StyledRangeButtons
  button {
    background-color: var(--dark-grey);
}
    
.StyledRangeButtons
  button
   :hover,
   :focus {
        background-color: var(--grey);
}
  
.StyledRangeButtons
  button
    .active {
        background-color: var(--green);
}

/*Tracklist Component */
/* StyledTrackList class for ul element*/
/* The StyledTrackList component styles the tracklist component */
.StyledTracklist {
  list-style: none;
  margin: 0;
  padding: 0;
}

.track__item {
  display: grid;
  align-items: center;
  grid-template-columns: 20px 1fr;
  grid-gap: var(--spacing-md);
  padding: var(--spacing-xs);
  color: var(--light-grey);
  font-size: var(--fz-sm);
  border-radius: var(--border-radius-subtle);
  transition: background-color 0.3s ease;
  cursor: default;

  @media (min-width: 768px) {
    grid-template-columns: 20px 4fr 2fr minmax(60px, 1fr);
    padding: var(--spacing-xs) var(--spacing-sm);
  }
}

.track__item
 :hover,
 :focus {
    background-color: var(--dark-grey);
}

.track__item__num {
  display: flex;
  align-items: center;
  justify-content: flex-end;
  font-size: var(--fz-md);
  font-variant-numeric: tabular-nums;
  overflow: visible;
}

.track__item__title-group {
  display: flex;
  align-items: center;
}

.track__item__img {
  margin-right: var(--spacing-sm);
  width: 40px;
  height: 40px;
  flex-shrink: 0;
  background-color: var(--dark-grey);
}

.track__item__name {
  color: var(--white);
  font-size: var(--fz-md);
}

.track__item__album {
  display: none;

  @media (min-width: 768px) {
    display: block;
    white-space: nowrap;
  }
}

.track__item__duration {
  display: none;

  @media (min-width: 768px) {
    display: flex;
    justify-content: flex-end;
    font-variant-numeric: tabular-nums;
  }
}

/* StyledDropdown class for div element in the IndividualPlaylists.js file*/
/* The StyledDropdown component styles the dropdown menu used to sort tracks */
.StyledDropdown{
  position: absolute;
  top: 0;
  right: var(--spacing-md);
  z-index: 1;

  @media (min-width: 768px) {
    right: var(--spacing-xxl);
  }
}

.StyledDropdown
 :after {
   content: '';
   top: 15px;
   right: var(--spacing-sm);
   position: absolute;
   width: 0;
   height: 0;
   border-left: 5px solid transparent;
   border-right: 5px solid transparent;
   border-top: 6px solid var(--white);
}

select {
  -webkit-appearance: none;
  appearance: none;
  /* background-color: ${props => props.active ? 'rgba(255,255,255,0.1)' : 'transparent'}; */
  color: white;
  border: 0;
  border-radius: var(--border-radius-subtle);
  font-size: var(--fz-sm);
  font-family: inherit;
  padding: var(--spacing-xs) var(--spacing-xl) var(--spacing-xs) var(--spacing-sm);
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

